# -*- coding: utf-8 -*-
"""Synergy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nj1n-ZSrdToh3rDMJiHDo0vRDxtlQLzB
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.utils import to_categorical

# Load dataset
df = pd.read_csv("triage_patient_data.csv")

# Encode categorical variables
le_consciousness = LabelEncoder()
le_symptoms = LabelEncoder()
le_priority = LabelEncoder()

df["Consciousness_Level"] = le_consciousness.fit_transform(df["Consciousness_Level"])
df["Symptoms"] = le_symptoms.fit_transform(df["Symptoms"])
df["Triage_Priority"] = le_priority.fit_transform(df["Triage_Priority"])  # Encode target variable

# Define features and target
X = df.drop(columns=["Triage_Priority"])
y = df["Triage_Priority"]
y = to_categorical(y)  # Convert to categorical for NN

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Build neural network model
model = Sequential([
    Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
    Dropout(0.3),
    Dense(64, activation='relu'),
    Dropout(0.2),
    Dense(y.shape[1], activation='softmax')
])

# Compile model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train model
history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))

# Evaluate model
y_pred = model.predict(X_test)
y_pred_classes = np.argmax(y_pred, axis=1)
y_test_classes = np.argmax(y_test, axis=1)
accuracy = accuracy_score(y_test_classes, y_pred_classes)
print("Accuracy:", accuracy)
print("Classification Report:\n", classification_report(y_test_classes, y_pred_classes))

# Save model in .h5 format
model.save("triage_priority_model.h5")

# Save encoders and scaler
import joblib
joblib.dump(le_consciousness, "le_consciousness.pkl")
joblib.dump(le_symptoms, "le_symptoms.pkl")
joblib.dump(le_priority, "le_priority.pkl")
joblib.dump(scaler, "scaler.pkl")

# Plot loss and accuracy
plt.figure(figsize=(12, 5))

# Loss plot
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Model Loss')
plt.legend()

# Accuracy plot
plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Model Accuracy')
plt.legend()

plt.show()

import numpy as np
import pandas as pd
import tensorflow as tf
import joblib
from tensorflow.keras.models import load_model

# Load the trained model
model = load_model("triage_priority_model.h5")

# Load the encoders and scaler
le_consciousness = joblib.load("le_consciousness.pkl")
le_symptoms = joblib.load("le_symptoms.pkl")
le_priority = joblib.load("le_priority.pkl")
scaler = joblib.load("scaler.pkl")

# Function to get user input
def get_user_input():
    """Get user input for prediction."""
    print("\nEnter patient details:")

    age = int(input("Age: "))
    heart_rate = int(input("Heart Rate (bpm): "))
    bp_systolic = int(input("Blood Pressure Systolic: "))
    bp_diastolic = int(input("Blood Pressure Diastolic: "))
    respiratory_rate = int(input("Respiratory Rate: "))
    oxygen_saturation = int(input("Oxygen Saturation (%): "))
    temperature = float(input("Temperature (Â°F): "))
    pain_level = int(input("Pain Level (1-10): "))

    consciousness_level = input("Consciousness Level (e.g., Alert, Unconscious): ")
    symptoms = input("Symptoms (e.g., Chest Pain, Fever): ")

    # Encode categorical inputs
    consciousness_level = le_consciousness.transform([consciousness_level])[0]
    symptoms = le_symptoms.transform([symptoms])[0]

    # Convert to numpy array
    user_data = np.array([[age, heart_rate, bp_systolic, bp_diastolic, respiratory_rate,
                           oxygen_saturation, temperature, pain_level, consciousness_level, symptoms]])

    # Scale user input
    user_data_scaled = scaler.transform(user_data)

    return user_data_scaled

# Get user input and predict
user_input = get_user_input()
prediction = model.predict(user_input)

# Convert prediction to class label
predicted_class = np.argmax(prediction)
triage_priority = le_priority.inverse_transform([predicted_class])[0]

print(f"\nPredicted Triage Priority: {triage_priority}")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.utils.class_weight import compute_class_weight
from sklearn.metrics import accuracy_score, classification_report
from imblearn.over_sampling import SMOTE
from sklearn.ensemble import RandomForestClassifier
import joblib

# Load dataset
df = pd.read_csv("medical_analysis_data.csv")

# Encode categorical target variable
le_condition = LabelEncoder()
df["Condition"] = le_condition.fit_transform(df["Condition"])

# Define features and target
X = df.drop(columns=["Condition"])
y = df["Condition"]

# Handle class imbalance using SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Scale features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train RandomForest model
model = RandomForestClassifier(n_estimators=200, random_state=42, class_weight='balanced')
model.fit(X_train, y_train)

# Evaluate model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:\n", classification_report(y_test, y_pred))

# Save model and preprocessing objects
joblib.dump(model, "medical_condition_model.pkl")
joblib.dump(le_condition, "le_condition.pkl")
joblib.dump(scaler, "scaler.pkl")

# Feature importance plot
feature_importances = model.feature_importances_
plt.figure(figsize=(10, 5))
plt.bar(range(len(feature_importances)), feature_importances)
plt.xlabel("Feature Index")
plt.ylabel("Importance")
plt.title("Feature Importance in RandomForest Model")
plt.show()

import numpy as np
import pandas as pd
import joblib
import tensorflow as tf
from tensorflow.keras.models import load_model

# Load saved model and preprocessing objects
model = load_model("medical_condition_model.h5")
scaler = joblib.load("scaler.pkl")
le_condition = joblib.load("le_condition.pkl")

# Function to take user input and make predictions
def predict_condition():
    print("Enter the following patient details:")
    heart_rate = float(input("Heart Rate (bpm): "))
    oxygen_saturation = float(input("Oxygen Saturation (%): "))
    respiratory_rate = float(input("Respiratory Rate (breaths per min): "))
    blood_pressure_systolic = float(input("Systolic Blood Pressure (mmHg): "))
    blood_pressure_diastolic = float(input("Diastolic Blood Pressure (mmHg): "))
    ecg_abnormality = int(input("ECG Abnormality (0 = Normal, 1 = Abnormal): "))
    xray_findings = int(input("X-ray Findings (0 = Normal, 1 = Minor Issue, 2 = Critical Issue): "))
    ct_scan_findings = int(input("CT Scan Findings (0 = Normal, 1 = Minor Issue, 2 = Critical Issue): "))

    # Create input array
    user_data = np.array([[
        heart_rate, oxygen_saturation, respiratory_rate,
        blood_pressure_systolic, blood_pressure_diastolic,
        ecg_abnormality, xray_findings, ct_scan_findings
    ]])

    # Scale input data
    user_data = scaler.transform(user_data)

    # Predict condition
    prediction = model.predict(user_data)
    predicted_class = np.argmax(prediction, axis=1)[0]
    predicted_condition = le_condition.inverse_transform([predicted_class])[0]

    print("\nPredicted Medical Condition:", predicted_condition)
    print("Confidence Levels:", prediction[0])

# Run prediction function
if __name__ == "__main__":
    predict_condition()